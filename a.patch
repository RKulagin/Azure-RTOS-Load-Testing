diff --git a/LoadExample/Inc/main.h b/LoadExample/Inc/main.h
index 1409697..c59d61f 100644
--- a/LoadExample/Inc/main.h
+++ b/LoadExample/Inc/main.h
@@ -40,7 +40,8 @@ extern "C" {
 
 /* Exported types ------------------------------------------------------------*/
 /* USER CODE BEGIN ET */
-extern UART_HandleTypeDef huart3;
+extern UART_HandleTypeDef huart4;
+extern UART_HandleTypeDef huart5;
 extern UART_HandleTypeDef huart6;
 /* USER CODE END ET */
 
diff --git a/LoadExample/Inc/stm32f4xx_it.h b/LoadExample/Inc/stm32f4xx_it.h
index d07c709..4499a6c 100644
--- a/LoadExample/Inc/stm32f4xx_it.h
+++ b/LoadExample/Inc/stm32f4xx_it.h
@@ -56,7 +56,8 @@ void TIM6_DAC_IRQHandler(void);
 void PendSV_Handler(void);
 void SysTick_Handler(void);
 void OTG_FS_IRQHandler(void);
-void USART3_IRQHandler(void);
+void UART4_IRQHandler(void);
+void UART5_IRQHandler(void);
 void USART6_IRQHandler(void);
 
 /* USER CODE BEGIN EFP */
diff --git a/LoadExample/Src/main.c b/LoadExample/Src/main.c
index 882975d..4dd2edd 100644
--- a/LoadExample/Src/main.c
+++ b/LoadExample/Src/main.c
@@ -43,7 +43,8 @@
 /* Private variables ---------------------------------------------------------*/
 
 /* USER CODE BEGIN PV */
-UART_HandleTypeDef huart3;
+UART_HandleTypeDef huart4;
+UART_HandleTypeDef huart5;
 UART_HandleTypeDef huart6;
 /* USER CODE END PV */
 
@@ -51,7 +52,8 @@ UART_HandleTypeDef huart6;
 void SystemClock_Config(void);
 void PeriphCommonClock_Config(void);
 static void MX_GPIO_Init(void);
-static void MX_USART3_UART_Init(void);
+static void MX_UART4_UART_Init(void);
+static void MX_UART5_UART_Init(void);
 static void MX_USART6_UART_Init(void);
 void Queue_Init(void);
 /* USER CODE BEGIN PFP */
@@ -60,8 +62,11 @@ void Queue_Init(void);
 
 /* Private user code ---------------------------------------------------------*/
 /* USER CODE BEGIN 0 */
-volatile uint8_t UART3_RX_data[256];
-volatile uint8_t UART3_size_of_rx_data;
+volatile uint8_t UART4_RX_data[256];
+volatile uint8_t UART4_size_of_rx_data;
+
+volatile uint8_t UART5_RX_data[256];
+volatile uint8_t UART5_size_of_rx_data;
 
 volatile uint8_t UART6_RX_data[256];
 volatile uint8_t UART6_size_of_rx_data;
@@ -101,13 +106,15 @@ int main(void)
   /* Initialize all configured peripherals */
   MX_GPIO_Init();
   MX_USB_DEVICE_Init();
-  MX_USART3_UART_Init();
+  MX_UART4_Init();
+  MX_UART5_Init();
   MX_USART6_UART_Init();
   /* USER CODE BEGIN 2 */
   /* USER CODE END 2 */
   BSP_LED_Toggle(LED_BLUE);
 //  HAL_UART_Transmit(&huart3, "1", 1, 100);
-  HAL_UART_Receive_IT(&huart3, (uint8_t*)&UART3_RX_data, 1);
+  HAL_UART_Receive_IT(&huart4, (uint8_t*)&UART4_RX_data, 1);
+  HAL_UART_Receive_IT(&huart5, (uint8_t*)&UART5_RX_data, 1);
   HAL_UART_Receive_IT(&huart6, (uint8_t*)&UART6_RX_data, 1);
 //  HAL_UART_Receive(&huart3, (uint8_t*)&UART3_RX_data,1, 10000000);
   MX_ThreadX_Init();
@@ -141,20 +148,36 @@ int main(void)
 }
 
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
- if (huart == &huart3) {
-  if (UART3_size_of_rx_data == 0){
-    UART3_size_of_rx_data = UART3_RX_data[0];
-	  UART3_RX_data[0] = 0;
-	  HAL_UART_Receive_IT(&huart3, (uint8_t*)&UART3_RX_data, UART3_size_of_rx_data);
+ if (huart == &huart4) {
+  if (UART4_size_of_rx_data == 0){
+    UART4_size_of_rx_data = UART4_RX_data[0];
+	  UART4_RX_data[0] = 0;
+	  HAL_UART_Receive_IT(&huart4, (uint8_t*)&UART4_RX_data, UART4_size_of_rx_data);
+  }
+  else {
+    char* data = malloc(UART4_size_of_rx_data+1);
+	  memcpy(data, UART4_RX_data, UART4_size_of_rx_data);
+    data[UART4_size_of_rx_data] = 0;
+	  tx_queue_send(&QueueUART4Receiver, &data, TX_NO_WAIT);
+	  UART4_size_of_rx_data = 0;
+	  memset(UART4_RX_data, 0, 256);
+	  HAL_UART_Receive_IT(&huart4, (uint8_t*)&UART4_RX_data, 1);
+  }
+ }
+ else if (huart == &huart5) {
+  if (UART5_size_of_rx_data == 0){
+    UART5_size_of_rx_data = UART5_RX_data[0];
+	  UART5_RX_data[0] = 0;
+	  HAL_UART_Receive_IT(&huart5, (uint8_t*)&UART5_RX_data, UART5_size_of_rx_data);
   }
   else {
-    char* data = malloc(UART3_size_of_rx_data+1);
-	  memcpy(data, UART3_RX_data, UART3_size_of_rx_data);
-    data[UART3_size_of_rx_data] = 0;
-	  tx_queue_send(&QueueUART3Receiver, &data, TX_NO_WAIT);
-	  UART3_size_of_rx_data = 0;
-	  memset(UART3_RX_data, 0, 256);
-	  HAL_UART_Receive_IT(&huart3, (uint8_t*)&UART3_RX_data, 1);
+    char* data = malloc(UART5_size_of_rx_data+1);
+	  memcpy(data, UART5_RX_data, UART5_size_of_rx_data);
+    data[UART5_size_of_rx_data] = 0;
+	  tx_queue_send(&QueueUART5Receiver, &data, TX_NO_WAIT);
+	  UART5_size_of_rx_data = 0;
+	  memset(UART5_RX_data, 0, 256);
+	  HAL_UART_Receive_IT(&huart5, (uint8_t*)&UART5_RX_data, 1);
   }
  }
  else if (huart == &huart6) {
@@ -248,38 +271,73 @@ void PeriphCommonClock_Config(void)
 }
 
 /**
-  * @brief USART3 Initialization Function
+  * @brief UART4 Initialization Function
+  * @param None
+  * @retval None
+  */
+static void MX_UART4_Init(void)
+{
+
+  /* USER CODE BEGIN UART4_Init 0 */
+
+  /* USER CODE END UART4_Init 0 */
+
+  /* USER CODE BEGIN UART4_Init 1 */
+
+  /* USER CODE END UART4_Init 1 */
+  huart4.Instance = UART4;
+  huart4.Init.BaudRate = 115200;
+  huart4.Init.WordLength = UART_WORDLENGTH_8B;
+  huart4.Init.StopBits = UART_STOPBITS_1;
+  huart4.Init.Parity = UART_PARITY_NONE;
+  huart4.Init.Mode = UART_MODE_TX_RX;
+  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
+  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
+  if (HAL_UART_Init(&huart4) != HAL_OK)
+  {
+    Error_Handler();
+  }
+  /* USER CODE BEGIN UART4_Init 2 */
+
+  /* USER CODE END UART4_Init 2 */
+
+}
+
+/**
+  * @brief UART5 Initialization Function
   * @param None
   * @retval None
   */
-static void MX_USART3_UART_Init(void)
+static void MX_UART5_Init(void)
 {
 
-  /* USER CODE BEGIN USART3_Init 0 */
+  /* USER CODE BEGIN UART5_Init 0 */
 
-  /* USER CODE END USART3_Init 0 */
+  /* USER CODE END UART5_Init 0 */
 
-  /* USER CODE BEGIN USART3_Init 1 */
+  /* USER CODE BEGIN UART5_Init 1 */
 
-  /* USER CODE END USART3_Init 1 */
-  huart3.Instance = USART3;
-  huart3.Init.BaudRate = 115200;
-  huart3.Init.WordLength = UART_WORDLENGTH_8B;
-  huart3.Init.StopBits = UART_STOPBITS_1;
-  huart3.Init.Parity = UART_PARITY_NONE;
-  huart3.Init.Mode = UART_MODE_TX_RX;
-  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
-  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
-  if (HAL_UART_Init(&huart3) != HAL_OK)
+  /* USER CODE END UART5_Init 1 */
+  huart5.Instance = UART5;
+  huart5.Init.BaudRate = 115200;
+  huart5.Init.WordLength = UART_WORDLENGTH_8B;
+  huart5.Init.StopBits = UART_STOPBITS_1;
+  huart5.Init.Parity = UART_PARITY_NONE;
+  huart5.Init.Mode = UART_MODE_TX_RX;
+  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
+  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
+  if (HAL_UART_Init(&huart5) != HAL_OK)
   {
     Error_Handler();
   }
-  /* USER CODE BEGIN USART3_Init 2 */
- UART3_size_of_rx_data = 0;
-  /* USER CODE END USART3_Init 2 */
+  /* USER CODE BEGIN UART5_Init 2 */
+
+  /* USER CODE END UART5_Init 2 */
 
 }
 
+
+
 /**
   * @brief USART6 Initialization Function
   * @param None
diff --git a/LoadExample/Src/messages_queue.c b/LoadExample/Src/messages_queue.c
index c2e872c..bc3184b 100644
--- a/LoadExample/Src/messages_queue.c
+++ b/LoadExample/Src/messages_queue.c
@@ -8,6 +8,7 @@ struct Queue* Messages_Queue_Init(){
 	queue->start = 0;
 	queue->end = 0;
 	return queue;
+	
 }
 
 void Push(struct Queue* q, uint8_t* message){
diff --git a/LoadExample/Src/stm32f4xx_hal_msp.c b/LoadExample/Src/stm32f4xx_hal_msp.c
index 3681b64..86504a2 100644
--- a/LoadExample/Src/stm32f4xx_hal_msp.c
+++ b/LoadExample/Src/stm32f4xx_hal_msp.c
@@ -86,33 +86,76 @@ void HAL_MspInit(void)
 void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 {
   GPIO_InitTypeDef GPIO_InitStruct = {0};
-  if(huart->Instance==USART3)
+   if(huart->Instance==UART4)
   {
-  /* USER CODE BEGIN USART3_MspInit 0 */
+  /* USER CODE BEGIN UART4_MspInit 0 */
 
-  /* USER CODE END USART3_MspInit 0 */
+  /* USER CODE END UART4_MspInit 0 */
     /* Peripheral clock enable */
-    __HAL_RCC_USART3_CLK_ENABLE();
+    __HAL_RCC_UART4_CLK_ENABLE();
 
+    __HAL_RCC_GPIOA_CLK_ENABLE();
+    __HAL_RCC_GPIOC_CLK_ENABLE();
+    /**UART4 GPIO Configuration
+    PA0/WKUP     ------> UART4_TX
+    PC11     ------> UART4_RX
+    */
+    GPIO_InitStruct.Pin = GPIO_PIN_0;
+    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
+    GPIO_InitStruct.Pull = GPIO_NOPULL;
+    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
+    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
+    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
+
+    GPIO_InitStruct.Pin = GPIO_PIN_11;
+    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
+    GPIO_InitStruct.Pull = GPIO_NOPULL;
+    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
+    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
+    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
+
+    /* UART4 interrupt Init */
+    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
+    HAL_NVIC_EnableIRQ(UART4_IRQn);
+  /* USER CODE BEGIN UART4_MspInit 1 */
+
+  /* USER CODE END UART4_MspInit 1 */
+  }
+  else if(huart->Instance==UART5)
+  {
+  /* USER CODE BEGIN UART5_MspInit 0 */
+
+  /* USER CODE END UART5_MspInit 0 */
+    /* Peripheral clock enable */
+    __HAL_RCC_UART5_CLK_ENABLE();
+
+    __HAL_RCC_GPIOC_CLK_ENABLE();
     __HAL_RCC_GPIOD_CLK_ENABLE();
-    /**USART3 GPIO Configuration
-    PD8     ------> USART3_TX
-    PD9     ------> USART3_RX
+    /**UART5 GPIO Configuration
+    PC12     ------> UART5_TX
+    PD2     ------> UART5_RX
     */
-    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
+    GPIO_InitStruct.Pin = GPIO_PIN_12;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
     GPIO_InitStruct.Pull = GPIO_NOPULL;
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
-    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
-    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
+    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
+    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 
-    /* USART3 interrupt Init */
-    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
-    HAL_NVIC_EnableIRQ(USART3_IRQn);
-  /* USER CODE BEGIN USART3_MspInit 1 */
+    GPIO_InitStruct.Pin = GPIO_PIN_2;
+    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
+    GPIO_InitStruct.Pull = GPIO_NOPULL;
+    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
+    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
+    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
+ /* USART5 interrupt Init */
+    HAL_NVIC_SetPriority(USART5_IRQn, 0, 0);
+    HAL_NVIC_EnableIRQ(USART5_IRQn);
+  /* USER CODE BEGIN UART5_MspInit 1 */
 
-  /* USER CODE END USART3_MspInit 1 */
+  /* USER CODE END UART5_MspInit 1 */
   }
+
   else if(huart->Instance==USART6)
   {
   /* USER CODE BEGIN USART6_MspInit 0 */
@@ -150,25 +193,48 @@ void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 */
 void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
 {
-  if(huart->Instance==USART3)
+    if(huart->Instance==UART4)
   {
-  /* USER CODE BEGIN USART3_MspDeInit 0 */
+  /* USER CODE BEGIN UART4_MspDeInit 0 */
 
-  /* USER CODE END USART3_MspDeInit 0 */
+  /* USER CODE END UART4_MspDeInit 0 */
     /* Peripheral clock disable */
-    __HAL_RCC_USART3_CLK_DISABLE();
+    __HAL_RCC_UART4_CLK_DISABLE();
 
-    /**USART3 GPIO Configuration
-    PD8     ------> USART3_TX
-    PD9     ------> USART3_RX
+    /**UART4 GPIO Configuration
+    PA0/WKUP     ------> UART4_TX
+    PC11     ------> UART4_RX
     */
-    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
+    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
+
+    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
+
+    /* UART4 interrupt DeInit */
+    HAL_NVIC_DisableIRQ(UART4_IRQn);
+  /* USER CODE BEGIN UART4_MspDeInit 1 */
+
+  /* USER CODE END UART4_MspDeInit 1 */
+  }
+  else if(huart->Instance==UART5)
+  {
+  /* USER CODE BEGIN UART5_MspDeInit 0 */
+
+  /* USER CODE END UART5_MspDeInit 0 */
+    /* Peripheral clock disable */
+    __HAL_RCC_UART5_CLK_DISABLE();
+
+    /**UART5 GPIO Configuration
+    PC12     ------> UART5_TX
+    PD2     ------> UART5_RX
+    */
+    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
+
+    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
+    HAL_NVIC_DisableIRQ(USART5_IRQn);
 
-    /* USART3 interrupt DeInit */
-    HAL_NVIC_DisableIRQ(USART3_IRQn);
-  /* USER CODE BEGIN USART3_MspDeInit 1 */
+  /* USER CODE BEGIN UART5_MspDeInit 1 */
 
-  /* USER CODE END USART3_MspDeInit 1 */
+  /* USER CODE END UART5_MspDeInit 1 */
   }
   else if(huart->Instance==USART6)
   {
diff --git a/LoadExample/Src/stm32f4xx_it.c b/LoadExample/Src/stm32f4xx_it.c
index 3fe82f9..f273109 100644
--- a/LoadExample/Src/stm32f4xx_it.c
+++ b/LoadExample/Src/stm32f4xx_it.c
@@ -57,7 +57,8 @@
 /* External variables --------------------------------------------------------*/
 extern TIM_HandleTypeDef htim6;
 extern PCD_HandleTypeDef hpcd_USB_OTG_FS;
-extern UART_HandleTypeDef huart3;
+extern UART_HandleTypeDef huart4;
+extern UART_HandleTypeDef huart5;
 extern UART_HandleTypeDef huart6;
 
 /* USER CODE BEGIN EV */
@@ -192,17 +193,31 @@ void OTG_FS_IRQHandler(void)
 /* USER CODE BEGIN 1 */
 
 /**
-  * @brief This function handles USART3 global interrupt.
+  * @brief This function handles UART4 global interrupt.
   */
-void USART3_IRQHandler(void)
+void UART4_IRQHandler(void)
 {
-  /* USER CODE BEGIN USART3_IRQn 0 */
+  /* USER CODE BEGIN UART4_IRQn 0 */
 
-  /* USER CODE END USART3_IRQn 0 */
-  HAL_UART_IRQHandler(&huart3);
-  /* USER CODE BEGIN USART3_IRQn 1 */
+  /* USER CODE END UART4_IRQn 0 */
+  HAL_UART_IRQHandler(&huart4);
+  /* USER CODE BEGIN UART4_IRQn 1 */
 
-  /* USER CODE END USART3_IRQn 1 */
+  /* USER CODE END UART4_IRQn 1 */
+}
+
+/**
+  * @brief This function handles UART5 global interrupt.
+  */
+void UART5_IRQHandler(void)
+{
+  /* USER CODE BEGIN UART5_IRQn 0 */
+
+  /* USER CODE END UART5_IRQn 0 */
+  HAL_UART_IRQHandler(&huart5);
+  /* USER CODE BEGIN UART5_IRQn 1 */
+
+  /* USER CODE END UART5_IRQn 1 */
 }
 
 /**
